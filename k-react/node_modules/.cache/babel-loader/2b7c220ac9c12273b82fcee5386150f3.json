{"ast":null,"code":"var _jsxFileName = \"/home/kevinxie/code/k-world/k-world-frontend/k-react/src/Components/engine/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./engine.module.scss\";\nimport { useEvent } from \"../../hooks\";\nconst BLOCKS = [140, 250, 390];\nconst charWidth = 100;\nconst charHeight = 100; // const blockWidth = 80;\n// const blockHeight = 200;\n// this is in comparison to the rest of the game\n// 2 is twice the speed\n// 1 is the same speed\n\nconst JUMP_VELOCITY = 1.4;\n\nfunction CreateEngine(setState) {\n  this.settings = {\n    tile: 10 // width of one tile\n\n  }; // current stage position\n\n  this.game = \"start\";\n  this.stage = 0;\n  this.jump = false;\n  this.direction = \"up\";\n  this.position = 0;\n  this.max = this.settings.tile * 40; // this.blocks = BLOCKS.map((b) => b * this.settings.tile);\n  // const checkBlocks = () => {\n  //   const charXPos = this.stage + 200;\n  //   const charYPos = this.position;\n  //   // if the char has past all blocks\n  //   if (\n  //     charXPos > this.blocks[this.blocks.length - 1] + 200 &&\n  //     this.position <= 0\n  //   ) {\n  //     this.game = \"win\";\n  //   }\n  //   this.blocks.forEach((block) => {\n  //     // if char hits a block\n  //     if (\n  //       charXPos + charWidth >= block &&\n  //       charYPos <= blockHeight &&\n  //       charYPos + charHeight >= 0 &&\n  //       charXPos <= block + blockWidth\n  //     ) {\n  //       this.game = \"fail\";\n  //     }\n  //   });\n  // };\n\n  const doJump = () => {\n    // if not jumping, reset and return\n    if (!this.jump) {\n      this.position = 0;\n      this.direction = \"up\";\n      return;\n    } // if finished jumping, reset and return\n\n\n    if (this.direction === \"down\" && this.position <= 0) {\n      this.jump = false;\n      this.position = 0;\n      this.direction = \"up\";\n      return;\n    } // if the jump is at its max, start falling\n\n\n    if (this.position >= this.max) this.direction = \"down\"; // depending on the direction increment the jump.\n\n    if (this.direction === \"up\") {\n      this.position += this.settings.tile * JUMP_VELOCITY;\n    } else {\n      this.position -= this.settings.tile * JUMP_VELOCITY;\n    }\n  }; // function that will be continuously ran\n\n\n  this.repaint = () => {\n    // move the stage by one tile\n    this.stage += this.settings.tile; // check if char has hit a block\n    // checkBlocks();\n    // check and perform jump\n\n    doJump(); // set state for use in the component\n\n    setState({\n      stage: this.stage,\n      jump: this.position,\n      blocks: this.blocks,\n      status: this.game\n    }); // stop the game if the game var has been set to false\n\n    if (this.game !== \"start\") {\n      // reset and stop\n      this.game = \"start\";\n      this.stage = 0;\n      this.jump = false;\n      this.direction = \"up\";\n      this.position = 0;\n      return null;\n    } // start repaint on next frame\n\n\n    return requestAnimationFrame(this.repaint);\n  }; // trigger initial paint\n\n\n  this.repaint();\n  return () => ({\n    jump: () => {\n      // if jump is not active, trigger jump\n      if (!this.jump) {\n        this.jump = true;\n      }\n    }\n  });\n}\n\nconst initialState = {\n  stage: 0,\n  jump: 0,\n  blocks: [],\n  status: \"start\"\n};\nexport default function Engine() {\n  // game state\n  const [gameState, setGameState] = useState(initialState); // trigger game to start\n\n  const [start, setStart] = useState(false); // if game is running\n\n  const [started, setStarted] = useState(false); // instance of game engine\n\n  const [engine, setEngine] = useState(null);\n\n  const handleKeyPress = e => {\n    // the ' ' char actually represents the space bar key.\n    if (e.key === \" \") {\n      // start the game when the user first presses the spacebar\n      if (!started && !start) {\n        setStart(true);\n      } // if the game has not been initialized return\n\n\n      if (engine === null) return; // otherwise jump\n\n      engine.jump();\n    }\n  };\n\n  useEvent(\"keyup\", handleKeyPress);\n  useEffect(() => {\n    if (start) {\n      setStarted(true);\n      setStart(false); // create a new engine and save it to the state to use\n\n      setEngine(new CreateEngine( // set state\n      state => setGameState(state)));\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.stage,\n    style: {\n      transform: `translate(-${gameState.stage}px, 0px)` // move stage\n\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.character,\n    style: {\n      transform: `translate(${gameState.stage + 200}px, -${gameState.jump}px)`,\n      // move char in opposite direction\n      height: charHeight,\n      width: charWidth\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/home/kevinxie/code/k-world/k-world-frontend/k-react/src/Components/engine/index.js"],"names":["React","useState","useEffect","styles","useEvent","BLOCKS","charWidth","charHeight","JUMP_VELOCITY","CreateEngine","setState","settings","tile","game","stage","jump","direction","position","max","doJump","repaint","blocks","status","requestAnimationFrame","initialState","Engine","gameState","setGameState","start","setStart","started","setStarted","engine","setEngine","handleKeyPress","e","key","state","container","transform","character","height","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styles from \"./engine.module.scss\";\nimport { useEvent } from \"../../hooks\";\n\nconst BLOCKS = [140, 250, 390];\n\nconst charWidth = 100;\nconst charHeight = 100;\n\n// const blockWidth = 80;\n// const blockHeight = 200;\n\n// this is in comparison to the rest of the game\n// 2 is twice the speed\n// 1 is the same speed\nconst JUMP_VELOCITY = 1.4;\n\nfunction CreateEngine(setState) {\n  this.settings = {\n    tile: 10, // width of one tile\n  };\n\n  // current stage position\n  this.game = \"start\";\n  this.stage = 0;\n  this.jump = false;\n  this.direction = \"up\";\n  this.position = 0;\n  this.max = this.settings.tile * 40;\n  // this.blocks = BLOCKS.map((b) => b * this.settings.tile);\n\n  // const checkBlocks = () => {\n  //   const charXPos = this.stage + 200;\n  //   const charYPos = this.position;\n\n  //   // if the char has past all blocks\n  //   if (\n  //     charXPos > this.blocks[this.blocks.length - 1] + 200 &&\n  //     this.position <= 0\n  //   ) {\n  //     this.game = \"win\";\n  //   }\n\n  //   this.blocks.forEach((block) => {\n  //     // if char hits a block\n  //     if (\n  //       charXPos + charWidth >= block &&\n  //       charYPos <= blockHeight &&\n  //       charYPos + charHeight >= 0 &&\n  //       charXPos <= block + blockWidth\n  //     ) {\n  //       this.game = \"fail\";\n  //     }\n  //   });\n  // };\n\n  const doJump = () => {\n    // if not jumping, reset and return\n    if (!this.jump) {\n      this.position = 0;\n      this.direction = \"up\";\n      return;\n    }\n\n    // if finished jumping, reset and return\n    if (this.direction === \"down\" && this.position <= 0) {\n      this.jump = false;\n      this.position = 0;\n      this.direction = \"up\";\n      return;\n    }\n\n    // if the jump is at its max, start falling\n    if (this.position >= this.max) this.direction = \"down\";\n\n    // depending on the direction increment the jump.\n    if (this.direction === \"up\") {\n      this.position += this.settings.tile * JUMP_VELOCITY;\n    } else {\n      this.position -= this.settings.tile * JUMP_VELOCITY;\n    }\n  };\n\n  // function that will be continuously ran\n  this.repaint = () => {\n    // move the stage by one tile\n    this.stage += this.settings.tile;\n\n    // check if char has hit a block\n    // checkBlocks();\n\n    // check and perform jump\n    doJump();\n\n    // set state for use in the component\n    setState({\n      stage: this.stage,\n      jump: this.position,\n      blocks: this.blocks,\n      status: this.game,\n    });\n\n    // stop the game if the game var has been set to false\n    if (this.game !== \"start\") {\n      // reset and stop\n      this.game = \"start\";\n      this.stage = 0;\n      this.jump = false;\n      this.direction = \"up\";\n      this.position = 0;\n      return null;\n    }\n\n    // start repaint on next frame\n    return requestAnimationFrame(this.repaint);\n  };\n\n  // trigger initial paint\n  this.repaint();\n  return () => ({\n    jump: () => {\n      // if jump is not active, trigger jump\n      if (!this.jump) {\n        this.jump = true;\n      }\n    },\n  });\n}\n\nconst initialState = {\n  stage: 0,\n  jump: 0,\n  blocks: [],\n  status: \"start\",\n};\n\nexport default function Engine() {\n  // game state\n  const [gameState, setGameState] = useState(initialState);\n\n  // trigger game to start\n  const [start, setStart] = useState(false);\n\n  // if game is running\n  const [started, setStarted] = useState(false);\n\n  // instance of game engine\n  const [engine, setEngine] = useState(null);\n\n  const handleKeyPress = (e) => {\n    // the ' ' char actually represents the space bar key.\n    if (e.key === \" \") {\n      // start the game when the user first presses the spacebar\n      if (!started && !start) {\n        setStart(true);\n      }\n\n      // if the game has not been initialized return\n      if (engine === null) return;\n\n      // otherwise jump\n      engine.jump();\n    }\n  };\n\n  useEvent(\"keyup\", handleKeyPress);\n\n  useEffect(() => {\n    if (start) {\n      setStarted(true);\n      setStart(false);\n      // create a new engine and save it to the state to use\n      setEngine(\n        new CreateEngine(\n          // set state\n          (state) => setGameState(state)\n        )\n      );\n    }\n  });\n\n  return (\n    <div className={styles.container}>\n      <div\n        className={styles.stage}\n        style={{\n          transform: `translate(-${gameState.stage}px, 0px)`, // move stage\n        }}\n      >\n        <span\n          className={styles.character}\n          style={{\n            transform: `translate(${gameState.stage + 200}px, -${\n              gameState.jump\n            }px)`, // move char in opposite direction\n            height: charHeight,\n            width: charWidth,\n          }}\n        />\n        {/* {gameState.blocks.map((block) => (\n          <span\n            className={styles.block}\n            key={block}\n            style={{\n              transform: `translate(${block}px, 0px)`, // move stage\n              height: blockHeight,\n              width: blockWidth,\n            }}\n          />\n        ))} */}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}