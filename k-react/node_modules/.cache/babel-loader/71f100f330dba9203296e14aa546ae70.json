{"ast":null,"code":"var _jsxFileName = \"/home/kevinxie/code/k-world/k-world-frontend/k-react/src/Components/engine/index.js\";\nimport React from \"react\";\nimport styles from \"./engine.module.scss\";\nimport { useDidMount } from \"../../hooks\";\nimport { useEvent } from \"../../hooks\";\n\nfunction CreateEngine(setState) {\n  this.settings = {\n    tile: 100 //width of one tile\n\n  }; //current stage position\n\n  this.stage = 0; //function that will be run continuously\n\n  this.repaint = () => {\n    //move stage one tile\n    this.stage += this.settings.tile; //set state for use in the component\n\n    setState({\n      stage: this.stage\n    }); //start repaint on the next frame\n\n    return requestAnimationFrame(this.repaint);\n  }; //trigger initial paint\n\n\n  this.repaint();\n  return () => ({});\n}\n\nexport default function Engine() {\n  // game state\n  const [gameState, setGameState] = useState({\n    stage: 0\n  }); // trigger game to start\n\n  const [start, setStart] = useState(false); // if game is running\n\n  const [started, setStarted] = useState(false); // instance of game engine\n\n  const [engine, setEngine] = useState(null);\n\n  const handleKeyPress = e => {\n    // the ' ' char actually represents the space bar key.\n    if (e.key === \" \") {\n      // start the game when the user first presses the spacebar\n      if (!started && !start) {\n        setStart(true);\n      } // if the game has not been initialized return\n\n\n      if (engine === null) return; // otherwise jump\n      // engine.jump();\n    }\n  };\n\n  useEvent(\"keyup\", handleKeyPress);\n  useEffect(() => {\n    if (start) {\n      setStarted(true);\n      setStart(false); // create a new engine and save it to the state to use\n\n      setEngine(new CreateEngine( // set state\n      state => setGameState(state)));\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.stage,\n    style: {\n      transform: `translate(${gameState.stage}px, 0px)` // move stage\n\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.character,\n    style: {\n      transform: `translate(-${gameState.stage}px, 0px)` // move char in opposite direction\n\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/home/kevinxie/code/k-world/k-world-frontend/k-react/src/Components/engine/index.js"],"names":["React","styles","useDidMount","useEvent","CreateEngine","setState","settings","tile","stage","repaint","requestAnimationFrame","Engine","gameState","setGameState","useState","start","setStart","started","setStarted","engine","setEngine","handleKeyPress","e","key","useEffect","state","container","transform","character"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,OAAKC,QAAL,GAAgB;AACdC,IAAAA,IAAI,EAAE,GADQ,CACH;;AADG,GAAhB,CAD8B,CAI9B;;AACA,OAAKC,KAAL,GAAa,CAAb,CAL8B,CAO9B;;AACA,OAAKC,OAAL,GAAe,MAAM;AACnB;AACA,SAAKD,KAAL,IAAc,KAAKF,QAAL,CAAcC,IAA5B,CAFmB,CAInB;;AACAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,KAAK,EAAE,KAAKA;AAAd,KAAD,CAAR,CALmB,CAOnB;;AACA,WAAOE,qBAAqB,CAAC,KAAKD,OAAN,CAA5B;AACD,GATD,CAR8B,CAkB9B;;;AACA,OAAKA,OAAL;AACA,SAAO,OAAO,EAAP,CAAP;AACD;;AAED,eAAe,SAASE,MAAT,GAAkB;AAC/B;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAAC;AAAEN,IAAAA,KAAK,EAAE;AAAT,GAAD,CAA1C,CAF+B,CAI/B;;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBF,QAAQ,CAAC,KAAD,CAAlC,CAL+B,CAO/B;;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC,CAR+B,CAU/B;;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,IAAD,CAApC;;AAEA,QAAMO,cAAc,GAAIC,CAAD,IAAO;AAC5B;AACA,QAAIA,CAAC,CAACC,GAAF,KAAU,GAAd,EAAmB;AACjB;AACA,UAAI,CAACN,OAAD,IAAY,CAACF,KAAjB,EAAwB;AACtBC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAJgB,CAMjB;;;AACA,UAAIG,MAAM,KAAK,IAAf,EAAqB,OAPJ,CASjB;AACA;AACD;AACF,GAdD;;AAgBAhB,EAAAA,QAAQ,CAAC,OAAD,EAAUkB,cAAV,CAAR;AAEAG,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIT,KAAJ,EAAW;AACTG,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,MAAAA,QAAQ,CAAC,KAAD,CAAR,CAFS,CAGT;;AACAI,MAAAA,SAAS,CACP,IAAIhB,YAAJ,EACE;AACCqB,MAAAA,KAAD,IAAWZ,YAAY,CAACY,KAAD,CAFzB,CADO,CAAT;AAMD;AACF,GAZQ,CAAT;AAcA,sBACE;AAAK,IAAA,SAAS,EAAExB,MAAM,CAACyB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAEzB,MAAM,CAACO,KADpB;AAEE,IAAA,KAAK,EAAE;AACLmB,MAAAA,SAAS,EAAG,aAAYf,SAAS,CAACJ,KAAM,UADnC,CAC8C;;AAD9C,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AACE,IAAA,SAAS,EAAEP,MAAM,CAAC2B,SADpB;AAEE,IAAA,KAAK,EAAE;AACLD,MAAAA,SAAS,EAAG,cAAaf,SAAS,CAACJ,KAAM,UADpC,CAC+C;;AAD/C,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF,CADF;AAiBD","sourcesContent":["import React from \"react\";\nimport styles from \"./engine.module.scss\";\nimport { useDidMount } from \"../../hooks\";\nimport { useEvent } from \"../../hooks\";\n\nfunction CreateEngine(setState) {\n  this.settings = {\n    tile: 100, //width of one tile\n  };\n  //current stage position\n  this.stage = 0;\n\n  //function that will be run continuously\n  this.repaint = () => {\n    //move stage one tile\n    this.stage += this.settings.tile;\n\n    //set state for use in the component\n    setState({ stage: this.stage });\n\n    //start repaint on the next frame\n    return requestAnimationFrame(this.repaint);\n  };\n  //trigger initial paint\n  this.repaint();\n  return () => ({});\n}\n\nexport default function Engine() {\n  // game state\n  const [gameState, setGameState] = useState({ stage: 0 });\n\n  // trigger game to start\n  const [start, setStart] = useState(false);\n\n  // if game is running\n  const [started, setStarted] = useState(false);\n\n  // instance of game engine\n  const [engine, setEngine] = useState(null);\n\n  const handleKeyPress = (e) => {\n    // the ' ' char actually represents the space bar key.\n    if (e.key === \" \") {\n      // start the game when the user first presses the spacebar\n      if (!started && !start) {\n        setStart(true);\n      }\n\n      // if the game has not been initialized return\n      if (engine === null) return;\n\n      // otherwise jump\n      // engine.jump();\n    }\n  };\n\n  useEvent(\"keyup\", handleKeyPress);\n\n  useEffect(() => {\n    if (start) {\n      setStarted(true);\n      setStart(false);\n      // create a new engine and save it to the state to use\n      setEngine(\n        new CreateEngine(\n          // set state\n          (state) => setGameState(state)\n        )\n      );\n    }\n  });\n\n  return (\n    <div className={styles.container}>\n      <div\n        className={styles.stage}\n        style={{\n          transform: `translate(${gameState.stage}px, 0px)`, // move stage\n        }}\n      >\n        <span\n          className={styles.character}\n          style={{\n            transform: `translate(-${gameState.stage}px, 0px)`, // move char in opposite direction\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}